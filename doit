#!/bin/bash
FOO=$1
if [ -z "%FOO" ]; then 
	echo must provide a command 
	exit 1
fi
if [[ "$FOO" == *"uninstall"* ]]; then 
    ./doit down
    microk8s kubectl delete -f og.yaml -n sml-evo-system
    microk8s kubectl delete serviceaccount sml-evo-controller-manager -n sml-evo-system
    microk8s kubectl delete -f additionals/og.yaml -n sml-evo-system
    microk8s kubectl delete -f additionals/role.yaml -n sml-evo-system 
    microk8s kubectl delete -f additionals/role_binding.yaml -n sml-evo-system
    microk8s kubectl delete -f bundle/manifests/app.dac.nokia.com.example.com_smlevoes.yaml -n sml-evo-system
    microk8s kubectl delete -f bundle/manifests/sml-evo-controller-manager-metrics-service_v1_service.yaml -n sml-evo-system
    microk8s kubectl delete -f bundle/manifests/sml-evo-manager-config_v1_configmap.yaml -n sml-evo-system
    microk8s kubectl delete -f bundle/manifests/sml-evo-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml -n sml-evo-system
    microk8s kubectl delete -f bundle/manifests/sml-evo.clusterserviceversion.yaml -n sml-evo-system
    microk8s kubectl delete ns sml-evo-system 
    microk8s kubectl delete ns sml-evo
elif [[ "$FOO" == *"install"* ]]; then
    microk8s kubectl create ns sml-evo-system 
    microk8s kubectl create ns sml-evo
    microk8s kubectl create -f additionals/og.yaml -n sml-evo-system
    microk8s kubectl create -f additionals/role.yaml -n sml-evo-system
    microk8s kubectl create -f additionals/role_binding.yaml -n sml-evo-system
    microk8s kubectl create serviceaccount sml-evo-controller-manager -n sml-evo-system
    microk8s kubectl create -f bundle/manifests/app.dac.nokia.com.example.com_smlevoes.yaml -n sml-evo-system
    microk8s kubectl create -f bundle/manifests/sml-evo-controller-manager-metrics-service_v1_service.yaml -n sml-evo-system
    microk8s kubectl create -f bundle/manifests/sml-evo-manager-config_v1_configmap.yaml -n sml-evo-system
    microk8s kubectl create -f bundle/manifests/sml-evo-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml -n sml-evo-system
    microk8s kubectl create -f bundle/manifests/sml-evo.clusterserviceversion.yaml -n sml-evo-system
elif [[ "$FOO" == *"build"* ]]; then
    if [ -z "$VERSION" ]; then 
	    echo must provide a version
	    exit 1
    fi
    make docker-build  docker-push bundle
elif [[ "$FOO" == *"up"* ]]; then
	microk8s kubectl apply -f config/samples/app.dac.nokia.com_v1alpha1_smlevo.yaml  -n sml-evo
elif [[ "$FOO" == *"down"* ]]; then
	microk8s kubectl delete -f config/samples/app.dac.nokia.com_v1alpha1_smlevo.yaml  -n sml-evo
elif [[ "$FOO" == *"logs"* ]]; then
    microk8s kubectl logs -f --namespace sml-evo-system $(microk8s kubectl get pods --namespace sml-evo-system |  grep sml-evo- | awk '{print $1}') manager
	echo dont know how to $FOO
	exit 1
fi

